/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package movimientos.recepcion;

import movimientos.servicios.*;
import buscadores.*;
import referenciales.*;
import java.awt.event.KeyEvent;
import java.sql.Date;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import menu.menu;

/**
 *
 * @author hpnotebook
 */
public class detalle_reserva extends javax.swing.JInternalFrame {

    conexion.conexion con = new conexion.conexion();
    javax.swing.table.DefaultTableModel t, t1;
    DecimalFormat num = new DecimalFormat("#,##0");
    SimpleDateFormat fec = new SimpleDateFormat("dd/MM/yyyy");
    
     private String id_tabla="nada";
     
     private String formulario="";
     
     int f = -1;
     int c = -1;
     String tabla[][];
     int precio=0;
     String idd[];
    public detalle_reserva(String formulario, String pasar, String[] iddd) {
        initComponents();
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null);
        t= (javax.swing.table.DefaultTableModel) tabla_habitaciones.getModel();
        t1= (javax.swing.table.DefaultTableModel) tabla_personas.getModel();
       // cargar_tabla("nombre","");
        tabla_habitaciones.getTableHeader().setReorderingAllowed(false);
        tabla_personas.getTableHeader().setReorderingAllowed(false);
       // jRadioButton1.setSelected(true);
        this.formulario = formulario;
       // txt_buscar.requestFocus();
       idd=iddd;
       combo();
       combo_habitacion.requestFocus();
       t.setRowCount(0);
       t1.setRowCount(0);
       if(!pasar.equals("")){
           cargar_tabla(pasar);
       }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_habitaciones = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        btn_agregar_cama = new javax.swing.JButton();
        btn_quitar_cama = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        combo_habitacion = new javax.swing.JComboBox<>();
        btn_habitacion = new javax.swing.JButton();
        btn_editar = new javax.swing.JButton();
        btn_limpiar = new javax.swing.JButton();
        txt_horaentrada = new javax.swing.JTextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser("dd/MM/yyyy","##/##/####",'_');
        jLabel22 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser("dd/MM/yyyy","##/##/####",'_');
        jLabel24 = new javax.swing.JLabel();
        txt_horasalida = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btn_actualizar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        btn_agregar = new javax.swing.JButton();
        btn_aceptar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_personas = new javax.swing.JTable();
        btn_agregar_cama1 = new javax.swing.JButton();
        btn_quitar_cama1 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        combo_personas = new javax.swing.JComboBox<>();
        bnt_persona = new javax.swing.JButton();
        btn_editar1 = new javax.swing.JButton();
        btn_limpiar1 = new javax.swing.JButton();
        combo_habitacion1 = new javax.swing.JComboBox<>();
        btn_habitacion1 = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(950, 580));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tabla_habitaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Habitacion", "Capacidad", "Entrada", "H. Entrada", "Salida", "H. Salida"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_habitaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabla_habitacionesMousePressed(evt);
            }
        });
        tabla_habitaciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabla_habitacionesKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabla_habitacionesKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tabla_habitaciones);

        jLabel20.setText("Hora Entr. :");

        btn_agregar_cama.setBackground(new java.awt.Color(255, 255, 255));
        btn_agregar_cama.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/mas2.png"))); // NOI18N
        btn_agregar_cama.setText("Agregar");
        btn_agregar_cama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregar_camaActionPerformed(evt);
            }
        });

        btn_quitar_cama.setBackground(new java.awt.Color(255, 255, 255));
        btn_quitar_cama.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/menos.png"))); // NOI18N
        btn_quitar_cama.setText("Quitar");
        btn_quitar_cama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_quitar_camaActionPerformed(evt);
            }
        });

        jLabel19.setText("Habitacion :");

        combo_habitacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_habitacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                combo_habitacionFocusGained(evt);
            }
        });
        combo_habitacion.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                combo_habitacionPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        combo_habitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_habitacionActionPerformed(evt);
            }
        });
        combo_habitacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                combo_habitacionKeyPressed(evt);
            }
        });

        btn_habitacion.setBackground(new java.awt.Color(255, 255, 255));
        btn_habitacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/buscar3.png"))); // NOI18N
        btn_habitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_habitacionActionPerformed(evt);
            }
        });

        btn_editar.setBackground(new java.awt.Color(255, 255, 255));
        btn_editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/edit1.png"))); // NOI18N
        btn_editar.setText("Editar");
        btn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editarActionPerformed(evt);
            }
        });

        btn_limpiar.setBackground(new java.awt.Color(255, 255, 255));
        btn_limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/delete2.png"))); // NOI18N
        btn_limpiar.setText("Limpiar");
        btn_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_limpiarActionPerformed(evt);
            }
        });

        txt_horaentrada.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_horaentradaFocusLost(evt);
            }
        });
        txt_horaentrada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_horaentradaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_horaentradaKeyTyped(evt);
            }
        });

        jDateChooser1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel22.setText("Entrada :");

        jDateChooser2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel24.setText("Salida :");

        txt_horasalida.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_horasalidaFocusLost(evt);
            }
        });
        txt_horasalida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_horasalidaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_horasalidaKeyTyped(evt);
            }
        });

        jLabel21.setText("Hora Sali. :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combo_habitacion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btn_habitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_horaentrada, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_horasalida, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_agregar_cama, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_limpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_quitar_cama, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(18, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_quitar_cama, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn_agregar_cama, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel20)
                                .addComponent(txt_horaentrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel21)
                                .addComponent(txt_horasalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_habitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(combo_habitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel22)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24)
                                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btn_actualizar.setBackground(new java.awt.Color(255, 255, 255));
        btn_actualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/repetir.png"))); // NOI18N
        btn_actualizar.setText("Deshacer");
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });

        btn_cancelar.setBackground(new java.awt.Color(255, 255, 255));
        btn_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/cancelar.png"))); // NOI18N
        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        btn_agregar.setBackground(new java.awt.Color(255, 255, 255));
        btn_agregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/agregar.png"))); // NOI18N
        btn_agregar.setText("Agregar");
        btn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarActionPerformed(evt);
            }
        });

        btn_aceptar.setBackground(new java.awt.Color(255, 255, 255));
        btn_aceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/aprobar.png"))); // NOI18N
        btn_aceptar.setText("Aceptar");
        btn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(btn_actualizar)
                .addGap(22, 22, 22)
                .addComponent(btn_cancelar)
                .addGap(22, 22, 22)
                .addComponent(btn_agregar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(btn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(btn_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(btn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/atras.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(8, 175, 178));
        jLabel3.setText("Detalle Reserva");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tabla_personas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Documento", "Nombre y Apellido", "Codigo", "Habitacion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_personas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabla_personasMousePressed(evt);
            }
        });
        tabla_personas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabla_personasKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabla_personasKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tabla_personas);

        btn_agregar_cama1.setBackground(new java.awt.Color(255, 255, 255));
        btn_agregar_cama1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/mas2.png"))); // NOI18N
        btn_agregar_cama1.setText("Agregar");
        btn_agregar_cama1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregar_cama1ActionPerformed(evt);
            }
        });

        btn_quitar_cama1.setBackground(new java.awt.Color(255, 255, 255));
        btn_quitar_cama1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/menos.png"))); // NOI18N
        btn_quitar_cama1.setText("Quitar");
        btn_quitar_cama1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_quitar_cama1ActionPerformed(evt);
            }
        });

        jLabel25.setText("Persona :");

        combo_personas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_personas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                combo_personasFocusGained(evt);
            }
        });
        combo_personas.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                combo_personasPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        combo_personas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_personasActionPerformed(evt);
            }
        });
        combo_personas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                combo_personasKeyPressed(evt);
            }
        });

        bnt_persona.setBackground(new java.awt.Color(255, 255, 255));
        bnt_persona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/buscar3.png"))); // NOI18N
        bnt_persona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_personaActionPerformed(evt);
            }
        });

        btn_editar1.setBackground(new java.awt.Color(255, 255, 255));
        btn_editar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/edit1.png"))); // NOI18N
        btn_editar1.setText("Editar");
        btn_editar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editar1ActionPerformed(evt);
            }
        });

        btn_limpiar1.setBackground(new java.awt.Color(255, 255, 255));
        btn_limpiar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/delete2.png"))); // NOI18N
        btn_limpiar1.setText("Limpiar");
        btn_limpiar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_limpiar1ActionPerformed(evt);
            }
        });

        combo_habitacion1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_habitacion1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                combo_habitacion1FocusGained(evt);
            }
        });
        combo_habitacion1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                combo_habitacion1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        combo_habitacion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_habitacion1ActionPerformed(evt);
            }
        });
        combo_habitacion1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                combo_habitacion1KeyPressed(evt);
            }
        });

        btn_habitacion1.setBackground(new java.awt.Color(255, 255, 255));
        btn_habitacion1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_formularios/buscar3.png"))); // NOI18N
        btn_habitacion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_habitacion1ActionPerformed(evt);
            }
        });

        jLabel29.setText("Habitacion :");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(combo_personas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(bnt_persona, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(combo_habitacion1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_habitacion1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(42, 42, 42)
                        .addComponent(btn_agregar_cama1)
                        .addGap(6, 6, 6)
                        .addComponent(btn_quitar_cama1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_editar1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_limpiar1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bnt_persona, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel25)
                                    .addComponent(combo_personas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_habitacion1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addComponent(combo_habitacion1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_editar1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_limpiar1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_quitar_cama1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_agregar_cama1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(108, 108, 108))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(54, 54, 54))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 934, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       btn_aceptar.doClick();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
     /*   jRadioButton1.setSelected(true);
        txt_buscar.setText("");
        cargar_tabla("nombre", "");*/
     if(t.getRowCount()>0){
         t.setRowCount(0);
     }
     
     if(t1.getRowCount()>0){
         t1.setRowCount(0);
     }
     
     f = -1;
       c = -1;
       tabla = null;
       precio=0;
     
     btn_limpiar.doClick();
     btn_limpiar1.doClick();
    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void btn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarActionPerformed
    //    menu.menu.llamar_internal(new referenciales.empleado());
    }//GEN-LAST:event_btn_agregarActionPerformed

    private void btn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aceptarActionPerformed
       // referenciales.huespedes.buscador_personas("1");
       
       
       
       if(tabla_habitaciones.getRowCount()<=0 || tabla_personas.getRowCount()<=0){
         //  JOptionPane.showMessageDialog(null, "No ha cargado ningun detalle"); 
      
       movimientos.recepcion.reserva.detalle_reserva(null, f, c, precio);
       movimientos.recepcion.reserva.detalle_reserva1(null, f, c, precio);
       }else{
           
           f = tabla_habitaciones.getRowCount();
           c = 5;
           tabla = new String[f][c];
           
           for (int c1=0; c1<c;c1++){
               for(int f1=0; f1<f;f1++){
                   if(c1==0){
                      tabla[f1][c1] = tabla_habitaciones.getValueAt(f1,0).toString();
                      //precio += Integer.parseInt(tabla_equipaje.getValueAt(f1,2).toString());
                   }else if(c1==1){
                      tabla[f1][c1] = con.convertir_fecha(tabla_habitaciones.getValueAt(f1,3).toString());
                   }else if(c1==2){
                      tabla[f1][c1] = con.convertir_fecha(tabla_habitaciones.getValueAt(f1,5).toString());
                   }else if(c1==3){
                      tabla[f1][c1] = tabla_habitaciones.getValueAt(f1,4).toString();
                   }else if(c1==4){
                      tabla[f1][c1] = tabla_habitaciones.getValueAt(f1,6).toString();
                   }
               }
           }
           
       
       
       if(formulario.equals("reserva")){
           movimientos.recepcion.reserva.detalle_reserva(tabla, f, c, precio);
       }
       
           f = tabla_personas.getRowCount();
           c = 2;
           tabla = new String[f][c];
           
           for (int c1=0; c1<c;c1++){
               for(int f1=0; f1<f;f1++){
                   if(c1==0){
                      tabla[f1][c1] = tabla_personas.getValueAt(f1,0).toString();
                      //precio += Integer.parseInt(tabla_equipaje.getValueAt(f1,2).toString());
                   }else if(c1==1){
                      tabla[f1][c1] = tabla_personas.getValueAt(f1,3).toString();
                   }
               }
           }
           
           
           if(formulario.equals("reserva")){
              
           movimientos.recepcion.reserva.detalle_reserva1(tabla, f, c, precio);
       }
           
           
       }
       
       
       f = -1;
       c = -1;
       tabla = null;
       precio=0;
       
      // dispose();
        moveToBack();
    }//GEN-LAST:event_btn_aceptarActionPerformed

    private void tabla_habitacionesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabla_habitacionesKeyReleased

    
       
    }//GEN-LAST:event_tabla_habitacionesKeyReleased

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
       //btn_aceptar.doClick();
       btn_actualizar.doClick();
       btn_aceptar.doClick();
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void tabla_habitacionesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_habitacionesMousePressed

    }//GEN-LAST:event_tabla_habitacionesMousePressed

    private void tabla_habitacionesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabla_habitacionesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
          //  btn_aceptar.doClick();
        }
    }//GEN-LAST:event_tabla_habitacionesKeyPressed

    private void btn_agregar_camaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregar_camaActionPerformed
        if (txt_horaentrada.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe cargar hora");
            txt_horaentrada.requestFocus();
        }else if (txt_horasalida.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe cargar hora");
            txt_horasalida.requestFocus();
        }else if (jDateChooser1.getDate()==null) {
            JOptionPane.showMessageDialog(null, "Debe cargar fecha");
            jDateChooser1.requestFocus();
        }else if (jDateChooser2.getDate()==null) {
            JOptionPane.showMessageDialog(null, "Debe cargar fecha");
            jDateChooser2.requestFocus();
        }else if(combo_habitacion.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null, "Debe cargar habitacion");
            combo_habitacion.requestFocus();
        }else if(jDateChooser1.getDate().compareTo(jDateChooser2.getDate())>-1){
            JOptionPane.showMessageDialog(null, "fecha entrada mayor o igual a fecha salida");
            combo_habitacion.requestFocus();
        }else if(con.fechadmy(jDateChooser1.getDate()).equals(con.fechadmy(jDateChooser2.getDate()))){
            JOptionPane.showMessageDialog(null, "fecha entrada igual a fecha salida");
            combo_habitacion.requestFocus();
        }else {
            cargar_detalle();
            combo_habitacion.requestFocus();
        }
        
              
    }//GEN-LAST:event_btn_agregar_camaActionPerformed

    private void btn_quitar_camaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_quitar_camaActionPerformed
        if (tabla_habitaciones.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar por lo menos una fila", "Atencion",
                JOptionPane.WARNING_MESSAGE);

        } else {
            int mensaje = JOptionPane.showConfirmDialog(null, "Desea eliminar la fila seleccionada", "Atencion",
                JOptionPane.WARNING_MESSAGE, JOptionPane.QUESTION_MESSAGE);
            if (mensaje == 0) {
                javax.swing.table.DefaultTableModel tab = (javax.swing.table.DefaultTableModel) tabla_habitaciones.getModel();
                tab.removeRow(tabla_habitaciones.getSelectedRow());

            }
           // txt_telefono.setText("");
            txt_horaentrada.setText("");
            jDateChooser1.setDate(null);
            combo_habitacion.setSelectedIndex(-1);
            btn_limpiar.doClick();
        }
    }//GEN-LAST:event_btn_quitar_camaActionPerformed

    private void combo_habitacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_combo_habitacionFocusGained
        combo_habitacion.showPopup();
    }//GEN-LAST:event_combo_habitacionFocusGained

    private void combo_habitacionPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_combo_habitacionPopupMenuWillBecomeInvisible
        txt_horaentrada.requestFocus();
    }//GEN-LAST:event_combo_habitacionPopupMenuWillBecomeInvisible

    private void combo_habitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_habitacionActionPerformed
        if (!id_habitaciones.equals("") && !id_habitaciones.equals("nada")) {
                
              
                combo_habitacion.setSelectedItem(con.BuscaCol("SELECT CONCAT(h.id,'-',h.descripcion) FROM habitaciones h WHERE id = " + id_habitaciones));
                
                
               id_habitaciones="";
               
               
            }else if(id_habitaciones.equals("nada")){
               
               id_habitaciones="";
            }
    }//GEN-LAST:event_combo_habitacionActionPerformed

    private void combo_habitacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_combo_habitacionKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
          txt_horaentrada.requestFocus();
        }
    }//GEN-LAST:event_combo_habitacionKeyPressed

    private void btn_habitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_habitacionActionPerformed
        menu.llamar_internal(new buscadores.buscador_habitaciones("detalle_reserva"));
    }//GEN-LAST:event_btn_habitacionActionPerformed

    private void btn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editarActionPerformed
         if (tabla_habitaciones.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar por lo menos una fila", "Atencion",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
            
        if (txt_horaentrada.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe cargar hora");
            txt_horaentrada.requestFocus();
        }else if (txt_horaentrada.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe cargar hora");
            txt_horaentrada.requestFocus();
        }else if (jDateChooser1.getDate()==null) {
            JOptionPane.showMessageDialog(null, "Debe cargar fecha");
            jDateChooser1.requestFocus();
        }else if (jDateChooser2.getDate()==null) {
            JOptionPane.showMessageDialog(null, "Debe cargar fecha");
            jDateChooser2.requestFocus();
        }else if(combo_habitacion.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null, "Debe cargar habitacion");
            combo_habitacion.requestFocus();
        }else if(jDateChooser1.getDate().compareTo(jDateChooser2.getDate())==1){
            JOptionPane.showMessageDialog(null, "fecha entrada mayor a fecha salida");
            combo_habitacion.requestFocus();
        } else {
      
        int mensaje = JOptionPane.showConfirmDialog(null, "Desea editar la fila seleccionada", "Atencion",
        JOptionPane.WARNING_MESSAGE, JOptionPane.QUESTION_MESSAGE);
        if (mensaje == 0) {
            javax.swing.table.DefaultTableModel tab = (javax.swing.table.DefaultTableModel) tabla_habitaciones.getModel();
            tab.removeRow(tabla_habitaciones.getSelectedRow());
            cargar_detalle();
            combo_habitacion.requestFocus();
        }else {
        btn_limpiar.doClick();
        }
        }
    }//GEN-LAST:event_btn_editarActionPerformed

    private void btn_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_limpiarActionPerformed
     //  txt_telefono.setText("");
       txt_horaentrada.setText("");
       txt_horasalida.setText("");
        jDateChooser1.setDate(null);
        jDateChooser2.setDate(null);
       combo_habitacion.setSelectedIndex(-1);
    }//GEN-LAST:event_btn_limpiarActionPerformed

    private void txt_horaentradaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_horaentradaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
          txt_horasalida.requestFocus();
        }
    }//GEN-LAST:event_txt_horaentradaKeyPressed

    private void txt_horaentradaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_horaentradaKeyTyped
       // con.validar_campos(new int[]{39, 126}, "letras_y_numeros", evt, new int[]{47, 164, 165, 209, 241});
       if(txt_horaentrada.getText().length()==5){
            evt.consume();
        }
        con.validar_campos("numeros", evt);
        formato_hora(txt_horaentrada, evt);
    }//GEN-LAST:event_txt_horaentradaKeyTyped

    private void txt_horaentradaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_horaentradaFocusLost
        if(con.validarHora(txt_horaentrada.getText())==false){
            txt_horaentrada.setText("");
        }
        if(txt_horaentrada.getText().trim().replace(":", "").length()==3){
            txt_horaentrada.setText("");
        }
    }//GEN-LAST:event_txt_horaentradaFocusLost

    private void txt_horasalidaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_horasalidaFocusLost
        if(con.validarHora(txt_horasalida.getText())==false){
            txt_horasalida.setText("");
        }
        if(txt_horasalida.getText().trim().replace(":", "").length()==3){
            txt_horasalida.setText("");
        }
    }//GEN-LAST:event_txt_horasalidaFocusLost

    private void txt_horasalidaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_horasalidaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_horasalidaKeyPressed

    private void txt_horasalidaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_horasalidaKeyTyped
        if(txt_horasalida.getText().length()==5){
            evt.consume();
        }
        con.validar_campos("numeros", evt);
        formato_hora(txt_horasalida, evt);
    }//GEN-LAST:event_txt_horasalidaKeyTyped

    private void tabla_personasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_personasMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tabla_personasMousePressed

    private void tabla_personasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabla_personasKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tabla_personasKeyPressed

    private void tabla_personasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabla_personasKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tabla_personasKeyReleased

    private void btn_agregar_cama1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregar_cama1ActionPerformed
        if(combo_habitacion1.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null, "Debe cargar habitacion");
            combo_habitacion.requestFocus();
        }else if(combo_personas.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null, "Debe cargar persona");
            combo_personas.requestFocus();
        }else {
            cargar_detalle1();
            combo_personas.requestFocus();
        }
    }//GEN-LAST:event_btn_agregar_cama1ActionPerformed

    private void btn_quitar_cama1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_quitar_cama1ActionPerformed
         if (tabla_personas.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar por lo menos una fila", "Atencion",
                JOptionPane.WARNING_MESSAGE);

        } else {
            int mensaje = JOptionPane.showConfirmDialog(null, "Desea eliminar la fila seleccionada", "Atencion",
                JOptionPane.WARNING_MESSAGE, JOptionPane.QUESTION_MESSAGE);
            if (mensaje == 0) {
                javax.swing.table.DefaultTableModel tab = (javax.swing.table.DefaultTableModel) tabla_personas.getModel();
                tab.removeRow(tabla_personas.getSelectedRow());

            }
           // txt_telefono.setText("");
            btn_limpiar1.doClick();
        }
    }//GEN-LAST:event_btn_quitar_cama1ActionPerformed

    private void combo_personasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_combo_personasFocusGained
        combo_personas.showPopup();
    }//GEN-LAST:event_combo_personasFocusGained

    private void combo_personasPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_combo_personasPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_personasPopupMenuWillBecomeInvisible

    private void combo_personasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_personasActionPerformed
        if (!id_personas_buscador.equals("") && !id_personas_buscador.equals("nada")) {
                
                cargaCombo(combo_personas, "SELECT  CONCAT(p.nombre,' ',p.apellido)\n" +
                                            "FROM persona p\n" +
                                            "ORDER BY CONCAT(p.nombre,' ',p.apellido)\n" +
                                            "","CONCAT(p.nombre,' ',p.apellido)");
       
               combo_personas.setSelectedItem(con.BuscaCol("SELECT CONCAT(nombre, ' ',apellido) FROM persona WHERE id = " + id_personas_buscador));
                
               id_personas_buscador="";
               
              // txt_profesion.requestFocus();
            }else if(id_personas_buscador.equals("nada")){
                cargaCombo(combo_personas, "SELECT  CONCAT(p.nombre,' ',p.apellido)\n" +
                                            "FROM persona p\n" +
                                            "ORDER BY CONCAT(p.nombre,' ',p.apellido)\n" +
                                            "","CONCAT(p.nombre,' ',p.apellido)");
                id_personas_buscador="";
            }
    }//GEN-LAST:event_combo_personasActionPerformed

    private void combo_personasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_combo_personasKeyPressed
      if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
          combo_habitacion1.requestFocus();
        }
    }//GEN-LAST:event_combo_personasKeyPressed

    private void bnt_personaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_personaActionPerformed
       menu.llamar_internal(new buscadores.buscador_personas("detalle_reserva"));
    }//GEN-LAST:event_bnt_personaActionPerformed

    private void btn_editar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editar1ActionPerformed
       if (tabla_personas.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar por lo menos una fila", "Atencion",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
            
        if(combo_habitacion1.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null, "Debe cargar habitacion");
            combo_habitacion1.requestFocus();
        }else if(combo_personas.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null, "Debe cargar persona");
            combo_personas.requestFocus();
        } else {
      
        int mensaje = JOptionPane.showConfirmDialog(null, "Desea editar la fila seleccionada", "Atencion",
        JOptionPane.WARNING_MESSAGE, JOptionPane.QUESTION_MESSAGE);
        if (mensaje == 0) {
            javax.swing.table.DefaultTableModel tab = (javax.swing.table.DefaultTableModel) tabla_personas.getModel();
            tab.removeRow(tabla_personas.getSelectedRow());
            cargar_detalle1();
            combo_habitacion1.requestFocus();
        }else {
        btn_limpiar1.doClick();
        }
        }
    }//GEN-LAST:event_btn_editar1ActionPerformed

    private void btn_limpiar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_limpiar1ActionPerformed
 
       combo_habitacion1.setSelectedIndex(-1);
       combo_personas.setSelectedIndex(-1);
    }//GEN-LAST:event_btn_limpiar1ActionPerformed

    private void combo_habitacion1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_combo_habitacion1FocusGained
        combo_habitacion1.showPopup();
    }//GEN-LAST:event_combo_habitacion1FocusGained

    private void combo_habitacion1PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_combo_habitacion1PopupMenuWillBecomeInvisible
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_habitacion1PopupMenuWillBecomeInvisible

    private void combo_habitacion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_habitacion1ActionPerformed
        if (!id_habitaciones1.equals("") && !id_habitaciones1.equals("nada")) {
                
              
       
                combo_habitacion1.setSelectedItem(con.BuscaCol("SELECT CONCAT(h.id,'-',h.descripcion) FROM habitaciones h WHERE id = " + id_habitaciones1));
                
                
               id_habitaciones1="";
               
               
            }else if(id_habitaciones1.equals("nada")){
               
               id_habitaciones1="";
            }
    }//GEN-LAST:event_combo_habitacion1ActionPerformed

    private void combo_habitacion1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_combo_habitacion1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_habitacion1KeyPressed

    private void btn_habitacion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_habitacion1ActionPerformed
       menu.llamar_internal(new buscadores.buscador_habitaciones("detalle_reserva1"));
    }//GEN-LAST:event_btn_habitacion1ActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnt_persona;
    private javax.swing.JButton btn_aceptar;
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_agregar;
    private javax.swing.JButton btn_agregar_cama;
    private javax.swing.JButton btn_agregar_cama1;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_editar;
    private javax.swing.JButton btn_editar1;
    private javax.swing.JButton btn_habitacion;
    private javax.swing.JButton btn_habitacion1;
    private javax.swing.JButton btn_limpiar;
    private javax.swing.JButton btn_limpiar1;
    private javax.swing.JButton btn_quitar_cama;
    private javax.swing.JButton btn_quitar_cama1;
    private javax.swing.ButtonGroup buttonGroup1;
    private static javax.swing.JComboBox<String> combo_habitacion;
    private static javax.swing.JComboBox<String> combo_habitacion1;
    private static javax.swing.JComboBox<String> combo_personas;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tabla_habitaciones;
    private javax.swing.JTable tabla_personas;
    private javax.swing.JTextField txt_horaentrada;
    private javax.swing.JTextField txt_horasalida;
    // End of variables declaration//GEN-END:variables

    
     private void combo() {
         combo_habitacion.removeAllItems();
         combo_habitacion1.removeAllItems();
         for(int i=0; i<idd.length;i++){
             
             cargaCombo1(combo_habitacion, "SELECT CONCAT(h.id,'-',h.descripcion)\n" +
                                            "FROM habitaciones h\n" +
                                            "LEFT JOIN tarifas t ON t.habitacion_id = h.id\n" +
                                            "WHERE t.id = "+idd[i]+"\n" +
                                            "ORDER BY h.descripcion\n" +
                                            "","CONCAT(h.id,'-',h.descripcion)");
             
             cargaCombo1(combo_habitacion1, "SELECT CONCAT(h.id,'-',h.descripcion)\n" +
                                            "FROM habitaciones h\n" +
                                            "LEFT JOIN tarifas t ON t.habitacion_id = h.id\n" +
                                            "WHERE t.id = "+idd[i]+"\n" +
                                            "ORDER BY h.descripcion\n" +
                                            "","CONCAT(h.id,'-',h.descripcion)");
         }
         
         cargaCombo(combo_personas, "SELECT  CONCAT(p.nombre,' ',p.apellido)\n" +
                                            "FROM persona p\n" +
                                            "ORDER BY CONCAT(p.nombre,' ',p.apellido)\n" +
                                            "","CONCAT(p.nombre,' ',p.apellido)");
        
       // cargaCombo(combo_camas, "SELECT descripcion FROM cama order by descripcion", "descripcion");
    }
     
    
    
    private void cargaCombo(JComboBox cbo, String sql, String columna) {
        try {
            cbo.removeAllItems();
            con.sentencia = con.conexion.createStatement();
            con.resultado = con.sentencia.executeQuery(sql);
            while (con.resultado.next()) {
                if(columna.equals("descripcion")){
                    cbo.addItem(con.resultado.getString("descripcion"));
                }else if(columna.equals("nombre")){
                    cbo.addItem(con.resultado.getString("nombre"));
                }else if(columna.equals("CONCAT(p.nombre,' ',p.apellido)")){
                    cbo.addItem(con.resultado.getString("CONCAT(p.nombre,' ',p.apellido)"));
                }
                
            }
            cbo.setSelectedIndex(-1);
        } catch (SQLException ex) {
            Logger.getLogger(tarifas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void cargaCombo1(JComboBox cbo, String sql, String columna) {
        try {
            //cbo.removeAllItems();
            con.sentencia = con.conexion.createStatement();
            con.resultado = con.sentencia.executeQuery(sql);
            while (con.resultado.next()) {
                if(columna.equals("descripcion")){
                    cbo.addItem(con.resultado.getString("descripcion"));
                }else if(columna.equals("nombre")){
                    cbo.addItem(con.resultado.getString("nombre"));
                }else if(columna.equals("CONCAT(h.id,'-',h.descripcion)")){
                    cbo.addItem(con.resultado.getString("CONCAT(h.id,'-',h.descripcion)"));
                }
                
            }
            cbo.setSelectedIndex(-1);
        } catch (SQLException ex) {
            Logger.getLogger(tarifas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    static String id_habitaciones="";
    public static void buscador_habitaciones(String id){
        if (!id.equals("")) {
            //System.out.println(id);
            id_habitaciones = id; 
            combo_habitacion.setSelectedIndex(-1);
        }
    }
    
    static String id_habitaciones1="";
    public static void buscador_habitaciones1(String id){
        if (!id.equals("")) {
            //System.out.println(id);
            id_habitaciones1 = id; 
            combo_habitacion1.setSelectedIndex(-1);
        }
        
        
    }
    
    static String id_personas_buscador="";
    public static void buscador_personas(String id){
        if (!id.equals("")) {
            //System.out.println(id);
            id_personas_buscador = id; 
            combo_personas.setSelectedIndex(-1);
        }
    }
    
     private void cargar_detalle() {
         
         if (controlar() && controlar_estadia()){
         
         String idhabi = combo_habitacion.getSelectedItem().toString().substring(0,1);
       
        String habitacion = con.BuscaCol("SELECT h.descripcion\n" +
                                        "FROM habitaciones h\n" +
                                        "WHERE id ='" + idhabi + "'");
        
        String capacidad = con.BuscaCol("SELECT h.capacidad\n" +
                                        "FROM habitaciones h\n" +
                                        "WHERE id ='" + idhabi + "'");
        
        
        if (cuentaid(idhabi, tabla_habitaciones)) {
            t.addRow(new Object[]{idhabi, habitacion, capacidad, fec.format(jDateChooser1.getDate()),
                    txt_horaentrada.getText(), fec.format(jDateChooser2.getDate()), txt_horasalida.getText()});
        }
        
         }
                
        
    }
     
     
     private void cargar_detalle1() {
         
         
         String idhabi = combo_habitacion1.getSelectedItem().toString().substring(0,1);
       
        String habitacion = con.BuscaCol("SELECT h.descripcion\n" +
                                        "FROM habitaciones h\n" +
                                        "WHERE h.id ='" + idhabi + "'");
        
        String idper = con.BuscaCol("SELECT p.id\n" +
                                        "FROM persona p\n" +
                                        "WHERE CONCAT(p.nombre,' ',p.apellido) ='" + combo_personas.getSelectedItem().toString() + "'");
        
        String documento = con.BuscaCol("SELECT p.nro_documento\n" +
                                        "FROM persona p\n" +
                                        "WHERE p.id ='" + idper + "'");
        
        String nya = con.BuscaCol("SELECT CONCAT(p.nombre,' ',p.apellido)\n" +
                                        "FROM persona p\n" +
                                        "WHERE p.id ='" + idper + "'");
        
        
        if (cuentaid(idper, tabla_personas)) {
            t1.addRow(new Object[]{idper,documento,nya,idhabi, habitacion});
        }
        
    }
     
     
     private boolean cuentaid(String id, javax.swing.JTable tabla) {
        for (int i = 0; i < tabla.getRowCount(); i++) {
            String vcod = tabla.getValueAt(i, 0).toString();
            if (id.equals(vcod)) {
                JOptionPane.showMessageDialog(null, "Codigo ingresado ya existe en el detalle");
                return false;
            }
        }
        return true;
    }
    
    
    
     
     /* private boolean cuentaid(String id,javax.swing.JTable tabla, int posicion) {
        for (int i = 0; i < tabla.getRowCount(); i++) {
            String vcod = tabla.getValueAt(i, posicion).toString();
            if (id.equals(vcod)) {
                JOptionPane.showMessageDialog(null, "Codigo ingresado ya existe en el detalle");
                return false;
            }
        }
        return true;
    }*/

     
     
      private void cargar_tabla(String id) {
        
        try {
            
            String sql="";
            
         
            
            sql = "SELECT r.id_habitaciones, h.descripcion, h.capacidad,\n" +
                    " r.entrada, r.hora_entrada, r.salida, r.hora_salida\n" +
                    "FROM reserva_habitaciones r\n" +
                    "LEFT JOIN habitaciones h ON h.id = r.id_habitaciones\n" +
                    "WHERE r.id_reserva = "+id+" ";
            
           
            
            t.setRowCount(0);
            con.sentencia = con.conexion.createStatement();
            con.resultado = con.sentencia.executeQuery(sql);
            while (con.resultado.next()) {
                t.addRow(new Object[]{con.resultado.getInt("r.id_habitaciones"), 
                    con.resultado.getString("h.descripcion"),
                    con.resultado.getString("h.capacidad"),
                    fec.format(con.resultado.getDate("r.entrada")),
                    con.resultado.getString("r.hora_entrada"),
                    fec.format(con.resultado.getDate("r.salida")),
                    con.resultado.getString("r.hora_salida")});
                
            }
            
            
            sql = "SELECT r.persona_id, p.nro_documento, CONCAT(p.nombre,' ',p.apellido),\n" +
                    "r.habitacion_id, h.descripcion\n" +
                    "FROM reserva_personas r\n" +
                    "LEFT JOIN persona p ON p.id = r.persona_id\n" +
                    "LEFT JOIN habitaciones h ON h.id = r.habitacion_id\n" +
                    "WHERE r.reservas_id = "+id+" ";
            
           
            
            t1.setRowCount(0);
            con.sentencia = con.conexion.createStatement();
            con.resultado = con.sentencia.executeQuery(sql);
            while (con.resultado.next()) {
                t1.addRow(new Object[]{con.resultado.getInt("r.persona_id"), 
                    con.resultado.getString("p.nro_documento"),
                    con.resultado.getString("CONCAT(p.nombre,' ',p.apellido)"),
                    con.resultado.getString("r.habitacion_id"),
                    con.resultado.getString("h.descripcion")});
                
            }  
        
        
        } catch (SQLException ex) {
            Logger.getLogger(buscador_servicios.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    
      
      public void formato_hora(JTextField campo, KeyEvent e) { 
        String hora = campo.getText().trim().replace(":", "");
         
        String var, var1;
        
        if(hora.length()<=2){
            campo.setText(hora);
        }else if(hora.length()==3){
            var = hora.substring(0, 2);
            var1 = hora.substring(2, 3);
            campo.setText(var+":"+var1);
        }else if(hora.length()==4){
            var = hora.substring(0, 2);
            var1 = hora.substring(2, 4);
            campo.setText(var+":"+var1);
        }else if(hora.length()>=5){
            var = hora.substring(0, 2);
            var1 = hora.substring(2, 4);
            campo.setText(var+":"+var1);
        }
        
       
    }

    private boolean controlar() {
        String fecha_entrada = con.convertir_fecha(fec.format(jDateChooser1.getDate()));
        String fecha_salida = con.convertir_fecha(fec.format(jDateChooser2.getDate()));
        String hora_entrada = txt_horaentrada.getText();
        String hora_salida = txt_horasalida.getText();
        
        String idhabi = combo_habitacion.getSelectedItem().toString().substring(0,1);
        //System.out.println(fecha_entrada+" "+fecha_salida+" "+idhabi);
        java.util.Date resul;
        
        
        String salio="no";
        try {
            
            String sql="";
            
            sql = "SELECT r.entrada,r.salida\n" +
                    "FROM reserva_habitaciones r\n" +
                    "LEFT JOIN reservas rr ON r.id_reserva = rr.id\n" +
                    "WHERE (( '"+fecha_entrada+"' <= r.entrada AND  '"+fecha_salida+"' >= r.salida) \n" +
                    "AND rr.estado = 'A' AND r.id_habitaciones = "+idhabi+")";
                        
            con.sentencia = con.conexion.createStatement();
            con.resultado = con.sentencia.executeQuery(sql);
            if (con.resultado.next()) {
                    salio="si";                    
                    JOptionPane.showMessageDialog(null, "Hay una reserva entre las fechas "+ 
                            fec.format(con.resultado.getDate("r.entrada"))+" y "+
                            fec.format(con.resultado.getDate("r.salida"))); 
                return false;
            }
            
                if(salio.equals("no")){
                sql = "SELECT r.entrada,r.salida\n" +
                        "FROM reserva_habitaciones r\n" +
                        "LEFT JOIN reservas rr ON r.id_reserva = rr.id\n" +
                        "WHERE (( '"+fecha_entrada+"' >= r.entrada AND  '"+fecha_entrada+"' < r.salida) \n" +
                        "AND rr.estado = 'A' AND r.id_habitaciones = "+idhabi+")";

                con.sentencia = con.conexion.createStatement();
                con.resultado = con.sentencia.executeQuery(sql);
                if (con.resultado.next()) {
                        salio="si";                    
                        JOptionPane.showMessageDialog(null, "Hay una reserva entre las fechas "+ 
                                fec.format(con.resultado.getDate("r.entrada"))+" y "+
                                fec.format(con.resultado.getDate("r.salida"))); 
                        return false;
                }  
                }
                    if(salio.equals("no")){
                    sql = "SELECT r.entrada,r.salida\n" +
                            "FROM reserva_habitaciones r\n" +
                            "LEFT JOIN reservas rr ON r.id_reserva = rr.id\n" +
                            "WHERE (( '"+fecha_salida+"' > r.entrada AND  '"+fecha_salida+"' <= r.salida) \n" +
                            "AND rr.estado = 'A' AND r.id_habitaciones = "+idhabi+")";

                    con.sentencia = con.conexion.createStatement();
                    con.resultado = con.sentencia.executeQuery(sql);
                    if (con.resultado.next()) {
                            salio="si";                    
                            JOptionPane.showMessageDialog(null, "Hay una reserva entre las fechas "+ 
                                    fec.format(con.resultado.getDate("r.entrada"))+" y "+
                                    fec.format(con.resultado.getDate("r.salida"))); 
                                    return false;
                    }
                    }
        } catch (SQLException ex) {
            Logger.getLogger(buscador_servicios.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
        
        String col = con.BuscaCol("SELECT r.hora_entrada\n" +
                                "FROM reserva_habitaciones r\n" +
                                "LEFT JOIN reservas rr ON r.id_reserva = rr.id\n" +
                                "WHERE ((r.entrada = '"+fecha_salida+"') AND (r.hora_entrada <= '"+hora_salida+"')\n" +
                                "AND rr.estado = 'A' AND r.id_habitaciones = "+idhabi+")");
        
        //System.out.println(fecha_salida+" "+hora_salida+" "+idhabi);
        //System.out.println(resul);
                
        if(!col.equals("")){
            JOptionPane.showMessageDialog(null, "Hay una reserva con hora de entrada "+ col); 
            return false;
        }
        
        
       col = con.BuscaCol("SELECT r.hora_salida\n" +
                                "FROM reserva_habitaciones r\n" +
                                "LEFT JOIN reservas rr ON r.id_reserva = rr.id\n" +
                                "WHERE ((r.salida = '"+fecha_entrada+"') AND (r.hora_salida >= '"+hora_entrada+"')\n" +
                                "AND rr.estado = 'A' AND r.id_habitaciones = "+idhabi+")");
        
        //System.out.println(fecha_salida+" "+hora_salida+" "+idhabi);
        //System.out.println(resul);
                
        if(!col.equals("")){
            JOptionPane.showMessageDialog(null, "Hay una reserva con hora de salida "+ col); 
            return false;
        }
        
        
        return true;
        
    }
    
    private boolean controlar_estadia() {
        String fecha_entrada = con.convertir_fecha(fec.format(jDateChooser1.getDate()));
        String fecha_salida = con.convertir_fecha(fec.format(jDateChooser2.getDate()));
        String hora_entrada = txt_horaentrada.getText();
        String hora_salida = txt_horasalida.getText();
        
        String idhabi = combo_habitacion.getSelectedItem().toString().substring(0,1);
        //System.out.println(fecha_entrada+" "+fecha_salida+" "+idhabi);
        java.util.Date resul;
        
        
        String salio="no";
        try {
            
            String sql="";
            
            sql = "SELECT r.entrada,r.salida\n" +
                    "FROM estadia_habitaciones r\n" +
                    "LEFT JOIN estadia rr ON r.id_estadia = rr.id\n" +
                    "WHERE (( '"+fecha_entrada+"' <= r.entrada AND  '"+fecha_salida+"' >= r.salida) \n" +
                    "AND rr.estado = 'A' AND r.id_habitacion = "+idhabi+")";
                        
            con.sentencia = con.conexion.createStatement();
            con.resultado = con.sentencia.executeQuery(sql);
            if (con.resultado.next()) {
                    salio="si";                    
                    JOptionPane.showMessageDialog(null, "Hay una estadia entre las fechas "+ 
                            fec.format(con.resultado.getDate("r.entrada"))+" y "+
                            fec.format(con.resultado.getDate("r.salida"))); 
                return false;
            }
            
                if(salio.equals("no")){
                sql = "SELECT r.entrada,r.salida\n" +
                        "FROM estadia_habitaciones r\n" +
                        "LEFT JOIN estadia rr ON r.id_estadia = rr.id\n" +
                        "WHERE (( '"+fecha_entrada+"' >= r.entrada AND  '"+fecha_entrada+"' < r.salida) \n" +
                        "AND rr.estado = 'A' AND r.id_habitacion = "+idhabi+")";

                con.sentencia = con.conexion.createStatement();
                con.resultado = con.sentencia.executeQuery(sql);
                if (con.resultado.next()) {
                        salio="si";                    
                        JOptionPane.showMessageDialog(null, "Hay una estadia entre las fechas "+ 
                                fec.format(con.resultado.getDate("r.entrada"))+" y "+
                                fec.format(con.resultado.getDate("r.salida"))); 
                        return false;
                }  
                }
                    if(salio.equals("no")){
                    sql = "SELECT r.entrada,r.salida\n" +
                            "FROM estadia_habitaciones r\n" +
                            "LEFT JOIN estadia rr ON r.id_estadia = rr.id\n" +
                            "WHERE (( '"+fecha_salida+"' > r.entrada AND  '"+fecha_salida+"' <= r.salida) \n" +
                            "AND rr.estado = 'A' AND r.id_habitacion = "+idhabi+")";

                    con.sentencia = con.conexion.createStatement();
                    con.resultado = con.sentencia.executeQuery(sql);
                    if (con.resultado.next()) {
                            salio="si";                    
                            JOptionPane.showMessageDialog(null, "Hay una estadia entre las fechas "+ 
                                    fec.format(con.resultado.getDate("r.entrada"))+" y "+
                                    fec.format(con.resultado.getDate("r.salida"))); 
                                    return false;
                    }
                    }
        } catch (SQLException ex) {
            Logger.getLogger(buscador_servicios.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
        
        String col = con.BuscaCol("SELECT r.hora_entrada\n" +
                                "FROM estadia_habitaciones r\n" +
                                "LEFT JOIN estadia rr ON r.id_estadia = rr.id\n" +
                                "WHERE ((r.entrada = '"+fecha_salida+"') AND (r.hora_entrada <= '"+hora_salida+"')\n" +
                                "AND rr.estado = 'A' AND r.id_habitacion = "+idhabi+")");
        
        //System.out.println(fecha_salida+" "+hora_salida+" "+idhabi);
        //System.out.println(resul);
                
        if(!col.equals("")){
            JOptionPane.showMessageDialog(null, "Hay una estadia con hora de entrada "+ col); 
            return false;
        }
        
        
       col = con.BuscaCol("SELECT r.hora_salida\n" +
                                "FROM estadia_habitaciones r\n" +
                                "LEFT JOIN estadia rr ON r.id_estadia = rr.id\n" +
                                "WHERE ((r.salida = '"+fecha_entrada+"') AND (r.hora_salida >= '"+hora_entrada+"')\n" +
                                "AND rr.estado = 'A' AND r.id_habitacion = "+idhabi+")");
        
        //System.out.println(fecha_salida+" "+hora_salida+" "+idhabi);
        //System.out.println(resul);
                
        if(!col.equals("")){
            JOptionPane.showMessageDialog(null, "Hay una estadia con hora de salida "+ col); 
            return false;
        }
        
        
        return true;
        
    }

}
